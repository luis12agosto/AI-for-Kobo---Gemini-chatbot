<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Chatbot Kobo</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Carga de Google Fonts (opcional, requiere internet) -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Merriweather:wght@400;700&family=Montserrat:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --base-font-size: 16px;
        }
        /* --- ESTILOS GENERALES Y TEMAS --- */
        body { 
            /* Merriweather para el cuerpo, con fallbacks para uso offline */
            font-family: 'Merriweather', Georgia, serif;
            margin: 60px 0 70px 0; /* Margen para barras fijas */
            padding: 10px; 
            font-size: var(--base-font-size);
            transition: background-color 0.3s, color 0.3s;
        }
        body.dark-mode { background-color: #000; color: #fff; }
        body.light-mode { background-color: #f0f0f0; color: #000; }

        /* Montserrat para títulos y UI */
        h3, .tool-button, #send-button, #clear-button {
            font-family: 'Montserrat', Arial, sans-serif;
        }

        /* --- BARRA DE HERRAMIENTAS SUPERIOR FIJA --- */
        #top-bar {
            position: fixed; top: 0; left: 0; width: 100%;
            padding: 8px 5px; border-bottom-style: double;
            display: flex; justify-content: center; align-items: center;
        }
        .dark-mode #top-bar { background-color: #000; border-bottom: 2px double #fff; }
        .light-mode #top-bar { background-color: #f0f0f0; border-bottom: 2px double #000; }
        
        .tool-button {
            border: 1px solid; background-color: transparent;
            font-size: 18px; font-weight: bold; margin: 0 5px;
            width: 40px; height: 35px;
        }
        .dark-mode .tool-button { color: #fff; }
        .light-mode .tool-button { color: #000; }
        
        /* --- ESTILOS DE CHAT --- */
        #chat-history { padding: 5px 10px; margin-top: 10px; margin-bottom: 15px; }
        .user-message, .bot-message { padding: 8px; margin: 10px 0; border-style: dotted; border-width: 1px; }
        .dark-mode .user-message, .dark-mode .bot-message { border-color: #fff; }
        .light-mode .user-message, .light-mode .bot-message { border-color: #000; }
        
        .user-message { text-align: right; }
        .bot-message { text-align: left; word-break: break-word; }
        .error-message { border: 1px solid; color: #000; background-color: #aaa; padding: 8px; }

        /* --- ESTILOS DE FORMATO (TABLAS, CÓDIGO) --- */
        table { border-collapse: collapse; width: 100%; margin: 10px 0; table-layout: fixed; }
        th, td { border: 1px solid; padding: 8px; text-align: left; vertical-align: top; word-wrap: break-word; }
        th { font-family: 'Montserrat', Arial, sans-serif; font-weight: bold; }
        .dark-mode th, .dark-mode td { border-color: #fff; }
        .light-mode th, .light-mode td { border-color: #000; }
        
        pre {
            white-space: pre-wrap; word-wrap: break-word;
            padding: 10px; border-style: dashed; border-width: 1px;
        }
        .dark-mode pre { background-color: #111; border-color: #555; }
        .light-mode pre { background-color: #ddd; border-color: #888; }

        /* --- ZONA DE INPUT INFERIOR FIJA --- */
        #input-area { position: fixed; bottom: 0; left: 0; width: 100%; padding: 10px 5px; border-top-style: double; }
        .dark-mode #input-area { background-color: #000; border-top: 2px double #fff; }
        .light-mode #input-area { background-color: #f0f0f0; border-top: 2px double #000; }
        
        #prompt-input { width: calc(100% - 150px); padding: 8px; border-radius: 0; border: 1px solid; }
        .dark-mode #prompt-input { background-color: #000; color: #fff; }
        .light-mode #prompt-input { background-color: #fff; color: #000; }
        
        #send-button, #clear-button { width: 65px; padding: 8px; border: 1px solid; font-size: 16px; }
        .dark-mode #send-button, .dark-mode #clear-button { background-color: #000; color: #fff; }
        .light-mode #send-button, .light-mode #clear-button { background-color: #fff; color: #000; }
    </style>
</head>
<body>
    <div id="top-bar">
        <button class="tool-button" onclick="scrollPage(-150)">&#9650;</button>
        <button class="tool-button" onclick="scrollPage(150)">&#9660;</button>
        <button class="tool-button" onclick="changeFontSize(1)">A+</button>
        <button class="tool-button" onclick="changeFontSize(-1)">A-</button>
        <button class="tool-button" onclick="toggleTheme()">&#9728;</button>
    </div>
    <div id="chat-container"><div id="chat-history"></div></div>
    <div id="input-area">
        <input type="text" id="prompt-input" placeholder="Escribe aqu&iacute;..."><button id="send-button" onclick="sendMessage()">Enviar</button><button id="clear-button" onclick="clearMemory()">Limpiar</button>
    </div>

    <script>
        // --- CONFIGURACIÓN REQUERIDA ---
        // Reemplaza el texto de abajo con tu clave de API de Google Gemini.
        var apiKey = "PEGA_AQUI_TU_CLAVE_DE_API_DE_GEMINI";

        // --- VARIABLES GLOBALES ---
        var conversationHistory = [];
        var currentFontSize = 16;

        // --- TRADUCTOR DE MARKDOWN A HTML ---
        function markdownToHtml(text) {
            var html = text;
            html = html.replace(/```([\s\S]*?)```/g, '<pre>$1</pre>');
            var tableRegex = /\|(.+?)\|\s*\n\s*\|([ -|]+?)\|([\s\S]*?)(?=\n\n|\n*$)/g;
            html = html.replace(tableRegex, function(match, header, separator, body) {
                var headerCellsRaw = header.trim().split('|');
                if (headerCellsRaw[headerCellsRaw.length - 1].trim() === '') {
                    headerCellsRaw.pop();
                }
                var headerCells = headerCellsRaw.map(function(h) { return '<th>' + h.trim() + '</th>'; }).join('');
                var bodyRows = body.trim().split('\n').map(function(row) {
                    if (row.trim().replace(/[-| ]/g, '').length === 0) return '';
                    var cellsRaw = row.trim().split('|');
                    if (cellsRaw.length > headerCellsRaw.length) {
                        cellsRaw = cellsRaw.slice(0, headerCellsRaw.length);
                    }
                    var cells = cellsRaw.map(function(c) {
                        var cellContent = c.trim();
                        if (cellContent.indexOf(',') !== -1 && cellContent.indexOf('<br>') === -1) {
                            return '<td>' + cellContent.split(',').map(function(item) { return item.trim(); }).join('<br>') + '</td>';
                        }
                        return '<td>' + cellContent + '</td>';
                    }).join('');
                    return '<tr>' + cells + '</tr>';
                }).join('');
                return '<table><thead><tr>' + headerCells + '</tr></thead><tbody>' + bodyRows + '</tbody></table>';
            });
            html = html.replace(/^\s*[\*-]\s+(.*)/gm, '<li>$1</li>');
            html = html.replace(/<\/li>\n<li>/g, '</li><li>');
            html = html.replace(/(<li>.*<\/li>)/g, '<ul>$1</ul>');
            html = html.replace(/\*\*(.*?)\*\*/g, '<b>$1</b>');
            html = html.replace(/\*(.*?)\*/g, '<i>$1</i>');
            return html;
        }

        // --- FUNCIONES DE LA INTERFAZ ---
        function toggleTheme() {
            var isDarkMode = document.body.classList.contains('dark-mode');
            if (isDarkMode) {
                document.body.classList.remove('dark-mode'); document.body.classList.add('light-mode');
                localStorage.setItem('koboChatTheme', 'light');
            } else {
                document.body.classList.remove('light-mode'); document.body.classList.add('dark-mode');
                localStorage.setItem('koboChatTheme', 'dark');
            }
        }
        function changeFontSize(amount) {
            currentFontSize += amount;
            if (currentFontSize < 12) currentFontSize = 12;
            if (currentFontSize > 24) currentFontSize = 24;
            document.documentElement.style.setProperty('--base-font-size', currentFontSize + 'px');
            localStorage.setItem('koboChatFontSize', currentFontSize);
        }
        function applyPreferences() {
            var savedTheme = localStorage.getItem('koboChatTheme') || 'dark';
            document.body.classList.add(savedTheme + '-mode');
            var savedFontSize = localStorage.getItem('koboChatFontSize');
            if (savedFontSize) {
                currentFontSize = parseInt(savedFontSize, 10);
                document.documentElement.style.setProperty('--base-font-size', currentFontSize + 'px');
            }
        }

        // --- LÓGICA DEL CHAT Y MEMORIA ---
        function saveHistory() { localStorage.setItem('koboChatHistory', JSON.stringify(conversationHistory)); }
        function loadHistory() {
            var chatHistory = document.getElementById('chat-history');
            var savedHistory = localStorage.getItem('koboChatHistory');
            if (savedHistory) {
                conversationHistory = JSON.parse(savedHistory);
                for (var i = 0; i < conversationHistory.length; i++) {
                    var message = conversationHistory[i];
                    var messageDiv = document.createElement('p');
                    messageDiv.className = (message.role === 'user') ? 'user-message' : 'bot-message';
                    messageDiv.innerHTML = (message.role === 'user') ? 'Tú: ' + message.parts[0].text : 'Gemini: ' + markdownToHtml(message.parts[0].text);
                    chatHistory.appendChild(messageDiv);
                }
            } else {
                var initialMessage = 'Hola, ¿en qué puedo ayudarte?';
                var botMessageDiv = document.createElement('p');
                botMessageDiv.className = 'bot-message';
                botMessageDiv.innerHTML = 'Gemini: ' + initialMessage;
                chatHistory.appendChild(botMessageDiv);
                conversationHistory.push({ role: 'model', parts: [{ text: initialMessage }] });
                saveHistory();
            }
            window.scrollTo(0, document.body.scrollHeight);
        }
        function clearMemory() {
            localStorage.removeItem('koboChatHistory');
            window.location.reload();
        }
        function scrollPage(amount){ window.scrollBy(0, amount); }
        function sendMessage() {
            if (apiKey === "PEGA_AQUI_TU_CLAVE_DE_API_DE_GEMINI") {
                alert("Por favor, edita este archivo y añade tu clave de API de Gemini para continuar.");
                return;
            }
            var promptInput = document.getElementById('prompt-input');
            var userMessage = promptInput.value;
            if (userMessage.trim() === '') return;
            var userMessageDiv = document.createElement('p');
            userMessageDiv.className = 'user-message';
            userMessageDiv.innerHTML = 'Tú: ' + userMessage;
            document.getElementById('chat-history').appendChild(userMessageDiv);
            promptInput.value = '';
            conversationHistory.push({ role: 'user', parts: [{ text: userMessage }] });
            saveHistory();
            var thinkingMessageDiv = document.createElement('p');
            thinkingMessageDiv.className = 'bot-message';
            thinkingMessageDiv.innerHTML = 'Gemini: ...';
            document.getElementById('chat-history').appendChild(thinkingMessageDiv);
            window.scrollTo(0, document.body.scrollHeight);
            var modelUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=' + apiKey;
            var xhr = new XMLHttpRequest();
            xhr.open('POST', modelUrl);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        var response = JSON.parse(xhr.responseText);
                        var botResponse = response.candidates[0].content.parts[0].text;
                        thinkingMessageDiv.innerHTML = 'Gemini: ' + markdownToHtml(botResponse);
                        conversationHistory.push({ role: 'model', parts: [{ text: botResponse }] });
                        saveHistory();
                    } else {
                        thinkingMessageDiv.className = 'error-message';
                        thinkingMessageDiv.innerHTML = 'Error: ' + xhr.status + ' - Falla de API. Verifica tu clave o la conexión.';
                    }
                    window.scrollTo(0, document.body.scrollHeight);
                }
            };
            xhr.onerror = function() {
                thinkingMessageDiv.className = 'error-message';
                thinkingMessageDiv.innerHTML = 'Error: Fallo de conexi&oacute;n de red.';
            };
            xhr.send(JSON.stringify({ "contents": conversationHistory }));
        }

        // Iniciar todo al cargar la página
        applyPreferences();
        loadHistory();
    </script>
</body>
</html>
